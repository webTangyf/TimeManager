{"version":3,"file":"index.js","sources":["src/error.js","src/warn.js","src/share.js","src/time.js","src/status.js","src/index.js"],"sourcesContent":["/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2021-03-24 17:26:57\n * @modify date 2021-03-24 17:26:57\n * @desc 错误类型基本封装\n */\n\n/**\n * 参数错误函数\n * @param  {String} 参数名称\n */\nexport const TypeError = param => new Error(`\"${param}\"参数类型错误`)\n/**\n * 环境错误函数\n */\nexport const ENVError = () => new Error(`当persisted为true时，TimeManager仅支持浏览器环境运行`)\n/**\n * 开始条件错误\n */\nexport const StartAfterSet = () => new Error(`请先调用set方法后，再启用倒计时`)\n/**\n * 添加条件错误\n */\n export const AddAfterSet = () => new Error(`请先调用set方法后，再增加时间间隔`)\n /**\n * 减少条件错误\n */\n  export const ReduceAfterSet = () => new Error(`请先调用set方法后，再减少时间间隔`)","/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2021-03-24 17:26:57\n * @modify date 2021-03-24 17:26:57\n * @desc 提醒封装\n */\n\n/**\n * 时间间隔错误warn\n */\nexport const GapWarn = () => console.warn(\"时间间隔不得小于零\")\n\n\n/**\n * reduce时间间隔错误warn\n */\n export const GapReduceWarn = () => console.warn(\"reduce后的时间间隔不得小于零\")\n\n/**\n * 已经开始计时警告\n * @param  {String} name 计时器名称\n */\nexport const hasStartedWarn = name => console.warn(`${name}: 已经开始计时`)\n\n/**\n * 已经停止计时警告\n * @param  {String} name 计时器名称\n */\n export const hasStopedWarn = name => console.warn(`${name}: 已经开始计时`)\n","/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2020-04-22 15:36:54\n * @modify date 2020-04-22 15:36:54\n * @desc 工具js\n */\n\n\n/**\n * 判断数据是否为空值['', undefined, null]\n * @author tangyufeng\n * @date 2019-10-24\n * @param {any} params 任何类型\n * @returns {boolean} 是否为空数据\n * @memberof Service\n */\nexport const isNoValue = params => {\n  const noValue = ['', undefined, null]\n  return noValue.includes(params)\n}\n\n/**\n * 字符转小写\n * @author tangyufeng\n * @date 2019-10-24\n * @param {String} params\n * @returns {String} 小写后的字符串\n * @memberof Service\n */\nexport const toLowerCase = params => {\n  if (!isString(params)) {\n    throw new Error(`${params} toLowerCase is no a String`)\n  }\n  return params.toLowerCase()\n}\n\n\n// 类型判断\nexport const isArray = value => getType(value) === 'array'\nexport const isPlainObj = value => getType(value) === 'object'\nexport const isString = value => getType(value) === 'string'\nexport const isNumber = value => getType(value) === 'number'\nexport const isBoolean = value => getType(value) === 'boolean'\nexport const isRegExp = value => getType(value) === 'regexp'\nexport const isError = value => getType(value) === 'error'\nexport const isDomexcEption = value => getType(value) === 'domexception'\nexport const isPlainNumber = value => isNumber(value) && !isNaN(value)\nexport const isNestType = value => isArray(value) || isPlainObj(value)\nexport const isNullObj = value => isPlainObj(value) && JSON.stringify(value) === '{}'\n\n/**\n * 通过Object的toString方法获取对象类型\n * @author tangyufeng\n * @date 2019-10-24\n * @param {*} obj\n * @returns \n */\nexport const getType = obj => {\n  return Object.prototype.toString.call(obj).replace(/\\[object|\\]|\\s/g, '').toLowerCase()\n}\n\n/**\n * 判断对象是不是plain obj 字符串\n * @author tangyufeng\n * @date 2020-04-18\n * @param {String} data\n * @returns \n */\nexport const isJsonStr = data => {\n  return isString(data) && data.startsWith('{') && data.endsWith('}')\n}\n\n/**\n * 获取时间戳\n * @author tangyufeng\n * @date 2020-04-22\n * @returns timestamp\n */\nexport const getTimeStamp = () => {\n  return `${new Date().getTime()}`\n}\n/**\n * 简单实现对象覆盖\n * @param  {Object} originObj 原对象\n * @param  {Object} targetObj 覆盖对象\n */\nexport const esayCover = (originObj, targetObj) => {\n  if (!isPlainObj(originObj) || !isPlainObj(targetObj)) {\n    throw new Error('esayCover函数的入参数仅接受plainObj')\n  }\n  return Object.keys(originObj).reduce((obj, key) => {\n    obj[key] = (isNoValue(targetObj[key]) && originObj[key]) || targetObj[key]\n    return obj\n  }, {})\n}\n\n\n/**\n * 是否为浏览器环境\n */\nexport const isBrowser = () => !isNoValue(window)","/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2020-07-04 09:38:25\n * @modify date 2021-03-24 17:19:00\n * @desc 时间相关常量\n */\n\nexport const SECUND = 1000\nexport const MIN = SECUND * 60\nexport const HOUR = MIN * 60\nexport const DAY = HOUR * 24\nexport const MONTH = DAY * 30\nexport const YEAR = DAY * 365","/**\n * @author tangyufeng\n * @email tangyufeng@szltech.com\n * @create date 2021-03-24 18:01:15\n * @modify date 2021-03-24 18:01:15\n * @desc 状态字典\n */\n\n// 初始化\nexport const INIT = \"INIT\"\n\n// 运行中\nexport const RUNNING = \"RUNNING\"\n\n// 暂停\nexport const STOP = \"STOP\"\n\n// 结束\nexport const END = \"END\"\n\n\n","/**\n * @author tangyufeng\n * @email 542853503@qq.com\n * @create date 2020-05-25 14:35:51\n * @modify date 2021-03-25 11:45:33\n * @desc 倒计时管理\n */\n\nimport * as ERR from './error'\nimport * as WARN from './warn'\nimport { esayCover, isBrowser, isNumber, getTimeStamp, isDomexcEption, isString } from './share'\nimport * as DATE from './time'\nimport * as STATUS from './status'\n\n/*\n* 默认配置项\n*/\nlet defaultOption = {\n  // 是否为调试模式\n  DEBUG: false,\n  // 是否在存储的时候自动清除过期的数据空间\n  STEP: DATE.SECUND,\n  // 是否持久化\n  persisted: true\n}\n\n/**\n * 获取当前的存储对象\n */\nconst _getStorage = function () {\n  return window[TimeManager.OPTION.DEFAULT_METHOD]\n}\n\n/**\n * 设置对应的数据\n */\n const _setTimeStorage = function (storage) {\n  Object.keys(storage).forEach(key => {\n    this._storage_[key] = storage[key]\n  })\n}\n\n/**\n * 获取剩余的间隔时间\n * @returns {Number} 剩余的间隔时间\n */\nconst _getLastGap = function () {\n  return parseInt((this._storage_.targetTimestamp - new Date().getTime()) / this._opt_.STEP)\n}\n\n/**\n * 判断当前倒计时是否已经结束\n * @returns {Boolean} 结束\n */\nconst _isEnd = function () {\n  return this._getLastGap() <= 0\n}\n\n/**\n * 运行前参数预备\n * @desc 同时这里在start 做了二次存储预备\n */\nconst _init = function (isStopOpen = false) {\n  const _gapStamp = this._storage_[isStopOpen ? 'stopGap' : 'gap'] * this._opt_.STEP\n  const _nowStamp = new Date().getTime()\n  this._storage_.beginTimestamp = _nowStamp\n  this._storage_.targetTimestamp = _nowStamp + _gapStamp\n  this._storage_.status = STATUS.RUNNING\n}\n\n/**\n * 计时运行函数\n */\nconst _run = function () {\n  if (this._storage_.status !== STATUS.RUNNING) {\n    return\n  }\n  this._timer = setTimeout(() => {\n    if (this._isEnd()) {\n      this.end()\n      return\n    }\n    this._stepCallBack && this._stepCallBack(this._storage_)\n    this._run()\n  }, this._opt_.STEP)\n}\n\n/**\n * 获取当前所有的key值\n * @returns key值数组\n */\n const _getStorageKeys = function () {\n  let index = 0\n  const storage =  _getStorage()\n  let key = storage.key(index)\n  let keys = []\n  while(isString(key)) {\n    keys.push(key)\n    index++\n    key = storage.key(index)\n  }\n  return keys.filter(item => item.indexOf(TimeManager.OPTION.DEFAULT_PREFIX) === 0)\n}\n\n/**\n * 判断当前错误信息是否为超出存储空间\n * @param  {Error} error 错误信息\n */\nconst _isOverStorage = function (error) {\n  if (isDomexcEption(error)){\n    const message = error.message\n    return message.includes('exceeded')\n  }\n}\n\n/**\n * 根据target规则进行本地\n * @param  {Object} target 存储对象\n */\nconst _save2Storage = function (target) {\n  const storage =  _getStorage()\n  try{\n    storage[`${TimeManager.OPTION.DEFAULT_PREFIX}${target.name}`] = JSON.stringify(target)\n  } catch(err) {\n    const isOverErr = _isOverStorage(err)\n    if (isOverErr) {\n      const keys = _getStorageKeys()\n      if (keys.length > 0) {\n        const storage =  _getStorage()\n        keys.forEach(key => {\n          const obj = JSON.parse(storage[key])\n          if (obj.status === STATUS.END) {\n            storage.removeItem(key)\n          }\n        })\n        try{\n          storage[`${TimeManager.OPTION.DEFAULT_PREFIX}${target.name}`] = JSON.stringify(target)\n        } catch (err) {\n          console.warn(err)\n        }\n      }\n    }\n    console.warn(err)\n  }\n}\n\n/**\n * 设置代理对象\n */\nconst _setProxy = function () {\n  let _this = this\n  this._storage_ = new Proxy(this._storage_, {\n    set: function (target, propKey, value, receiver) {\n      const flag = Reflect.set(target, propKey, value, receiver)\n      _this._save2Storage(target)\n      if (_this._opt_.DEBUG) {\n        console.log('proxy:',target.name , propKey, value)\n      }\n      return flag\n    }\n  })\n}\n\n\n/**\n * 用于设置时间\n * @param  {Number} gap\n */\nconst set = function (gap) {\n  if (!isNumber(gap)) {\n    throw ERR.TypeError('gap')\n  }\n  if (gap < 0) {\n    WARN.GapWarn()\n    gap = 0\n   }\n  this._storage_.gap = gap\n  return this\n}\n\n/**\n * 增加时间\n * @param  {Number} gap\n */\nconst add = function (gap) {\n  if (!isNumber(gap)) {\n    throw ERR.TypeError('gap')\n  }\n  if (!isNumber(this._storage_.gap)) {\n    throw ERR.AddAfterSet()\n  }\n  if (gap <= 0) {\n    WARN.GapWarn()\n    return this\n   }\n  const addGap = gap * this._opt_.STEP\n  const status = this._storage_.status\n  if (status === STATUS.RUNNING) {\n    this._storage_.targetTimestamp += addGap\n    this._storage_.gap += gap\n  }\n  // 这里使用includes 不使用else是考虑到后续的拓展性\n  if ([STATUS.INIT, STATUS.STOP, STATUS.END].includes(status)) {\n    this._storage_.gap += gap\n  }\n  return this\n}\n\n/**\n * 减少时间\n * @param  {Number} gap\n */\n const reduce = function (gap) {\n  if (!isNumber(gap)) {\n    throw ERR.TypeError('gap')\n  }\n  if (!isNumber(this._storage_.gap)) {\n    throw ERR.ReduceAfterSet()\n  }\n  if (gap <= 0) {\n    WARN.GapWarn()\n    return this\n   }\n  const addGap = gap * this._opt_.STEP\n  const status = this._storage_.status\n  if (status === STATUS.RUNNING) {\n    this._storage_.targetTimestamp -= addGap\n    this._storage_.gap -= gap\n    if (this._isEnd()) {\n      return this.end()\n    }\n  }\n  // 这里使用includes 不使用else是考虑到后续的拓展性\n  if ([STATUS.INIT, STATUS.STOP, STATUS.END].includes(status)) {\n    this._storage_.gap -= gap\n    if (this._storage_.gap < 0) {\n      WARN.GapReduceWarn()\n      this._storage_.gap = 0\n    }\n  }\n  return this\n}\n\n/**\n * 开始进行倒计时\n * @param  {Object} obj 配置信息\n * @param  {Function} obj.stepCallBack 每个间隙触发的函数\n * @param  {Function} obj.endCallback 每个间隙触发的函数\n */\nconst start = function (obj = {}) {\n  if (this._storage_.status === STATUS.RUNNING) {\n    WARN.hasStartedWarn(this._storage_.name)\n    return this\n  }\n  if (!isNumber(this._storage_.gap)) {\n    throw ERR.StartAfterSet()\n  }\n  const { stepCallBack, endCallBack } = obj\n  if (endCallBack) {\n    this._endCallBack = endCallBack\n  }\n  this._stepCallBack = stepCallBack\n  this._init()\n  this._run()\n  if (endCallBack) {\n    return this\n  }\n  // 参数检查\n  return new Promise((resolve, reject) => {\n    this._endCallBack = resolve\n  })\n}\n\n/**\n * 重新开始倒计时\n * @param  {Object} obj 配置信息\n * @param  {Function} obj.stepCallBack 每个间隙触发的函数\n * @param  {Function} obj.endCallback 每个间隙触发的函数\n * @param  {Boolean} repFlag 仅针对状态是STOP的时间管理者，是否替换原本的回调函数\n */\n const reStart = function (obj = {}, repFlag) {\n  let status = this._storage_.status\n  const { stepCallBack, endCallback } = obj\n  if (status === STATUS.STOP) {\n    this._init(true)\n    this._storage_.stopGap = null\n    setTimeout(() => {\n      if (this._isEnd()) {\n        this.end()\n      }\n      this._run()\n    })\n    if (repFlag) {\n      this._stepCallBack = stepCallBack\n      this.endCallback = endCallback\n      if (!endCallback) {\n        return new Promise((resolve, reject) => {\n          this._endCallBack = resolve\n        })\n      }\n    }\n    return this\n  }\n  if (endCallback) {\n    this._endCallBack = endCallback\n  }\n  this._stepCallBack = stepCallBack\n  if (status === STATUS.INIT) {\n    return this.start(obj)\n  }\n  if (status === STATUS.RUNNING) {\n    setTimeout(() => {\n      if (this._isEnd()) {\n        this.end()\n      }\n      this._run()\n    })\n    return this\n  }\n  // 参数检查\n  return new Promise((resolve, reject) => {\n    this._endCallBack = resolve\n  })\n}\n\n/**\n * 停止倒计时\n */\nconst stop = function () {\n  if (this._storage_.status === STATUS.STOP) {\n    WARN.hasStopedWarn(this._storage_.name)\n    return this\n  }\n  if (this._isEnd()) {\n    this.end()\n    return this\n  }\n  clearTimeout(this._timer)\n  this._storage_.stopGap = this._getLastGap()\n  this._storage_.status = STATUS.STOP\n  this._storage_.beginTimestamp = null\n  this._storage_.targetTimestamp = null\n  return this\n}\n\n/**\n * 结束倒计时\n */\nconst end = function () {\n  this._timer = null\n  this._storage_.status = STATUS.END\n  this._endCallBack && this._endCallBack(this._storage_)\n  this._endCallBack = null\n  this._stepCallBack = null\n  return this.reset()\n}\n\n/**\n * 销毁时间管理对象\n */\nconst destory = function () {\n  // 需要在文档里说名\n  if (this._storage_.status === STATUS.RUNNING) {\n    this.end()\n  }\n  // 排除名单\n  TimeManager.names = TimeManager.names.filter(name => name !== this._storage_.name)\n  // 移除本地储存\n  _getStorage().removeItem(this._storage_.name)\n  // 移除相关信息元\n  this._storage_ = null\n  this._opt_ = null\n  this._endCallBack = null\n  this._stepCallBack = null\n  // 覆盖方法\n\n}\n\n/**\n * 重制部分数据内容\n */\nconst reset = function () {\n  this._storage_.gap = 0\n  this._storage_.stopGap = null\n  this._storage_.beginTimestamp = null\n  this._storage_.targetTimestamp = null\n  return this\n}\n\n/**\n * 获取状态\n */\n const getStatus = function () {\n  return this._storage_.status\n}\n/**\n * 获取离结束的时间间隔\n */\nconst getGap = function () {\n  return this._storage_.gap\n}\n\n\n/**\n * 根据当前配置重新开始\n */\nconst reStarts = function () {\n  let keys = _getStorageKeys()\n  if (keys.length === 0) {\n    return {}\n  }\n  let map = {}\n  keys.forEach(key => {\n    try{\n      let _storage_ = JSON.parse(_getStorage()[key])\n      console.log(_storage_)\n      let timeManager = new TimeManager(_storage_.option)\n      timeManager._setTimeStorage(_storage_)\n      map[key] = timeManager\n    } catch (err) {\n      console.log(err)\n    }\n  })\n  return map\n}\n\n\n/**\n * 构建函数\n * @param  {Object} config 全局初始化配置\n */\nconst TimeManager = function (config = {persisted: true}) {\n  this._opt_ = esayCover(defaultOption, config)\n  if (!isBrowser() && this._opt_.persisted) {\n    throw ERR.ENVError()\n  }\n  // TODO: 检查运行环境， 目前只支持浏览器环境\n  if (this._opt_.DEBUG) {\n    console.log(this._opt_)\n  }\n  this._storage_ = {\n    name: config.name || `${getTimeStamp()}`,\n    beginTimestamp: null,\n    targetTimestamp: null,\n    gap: null,\n    stopGap: null,\n    status: STATUS.INIT,\n    option: this._opt_,\n  }\n  if (TimeManager.names.includes(this._storage_.name)) {\n    throw Error(`${this._storage_.name}已经存在`)\n  }\n  // 避免重复命名\n  TimeManager.names.push(this._storage_.name)\n  if (this._opt_.persisted) {\n    this._setProxy()\n  }\n}\n\n// 把基础的时间常量暴露除去\nTimeManager.OPTION = {\n  // 全局静态的默认存储方式\n  DEFAULT_METHOD: 'sessionStorage',\n  // 全局存储的默认命名作用域\n  DEFAULT_PREFIX: '__TIME_MANAGER__'\n\n}\nTimeManager.DATE = DATE\nTimeManager._getStorage = _getStorage\nTimeManager.reStarts = reStarts\nTimeManager.names = []\nTimeManager.prototype = {\n  set,\n  add,\n  reduce,\n  start,\n  stop,\n  end,\n  reset,\n  destory,\n  reStart,\n  getStatus,\n  getGap,\n  _init,\n  _isEnd,\n  _run,\n  _setProxy,\n  _setTimeStorage,\n  _getLastGap,\n  _isOverStorage,\n  _save2Storage\n}\n\n\nexport default TimeManager\n"],"names":["TypeError","Error","param","ENVError","StartAfterSet","AddAfterSet","ReduceAfterSet","GapWarn","console","warn","GapReduceWarn","hasStartedWarn","name","hasStopedWarn","isNoValue","undefined","includes","params","isPlainObj","getType","value","isString","isNumber","isDomexcEption","Object","prototype","toString","call","obj","replace","toLowerCase","getTimeStamp","Date","getTime","esayCover","originObj","targetObj","keys","reduce","key","isBrowser","window","SECUND","MIN","HOUR","DAY","MONTH","YEAR","INIT","RUNNING","STOP","END","defaultOption","DATE","_getStorage","TimeManager","OPTION","DEFAULT_METHOD","_setTimeStorage","storage","forEach","_storage_","_getLastGap","parseInt","this","targetTimestamp","_opt_","STEP","_isEnd","_init","_gapStamp","_nowStamp","beginTimestamp","status","STATUS","_run","_timer","setTimeout","_this3","end","_stepCallBack","_getStorageKeys","index","push","filter","item","indexOf","DEFAULT_PREFIX","_isOverStorage","error","message","_save2Storage","target","JSON","stringify","err","length","parse","removeItem","_setProxy","_this","Proxy","propKey","receiver","flag","Reflect","set","DEBUG","log","gap","ERR","add","start","stepCallBack","endCallBack","_endCallBack","Promise","resolve","reject","reStart","repFlag","endCallback","stopGap","_this5","stop","reset","destory","names","_this6","getStatus","getGap","reStarts","map","timeManager","option","config","persisted"],"mappings":"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"}